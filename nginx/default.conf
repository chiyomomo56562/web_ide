upstream frontend{
    server frontend:5173; #이 포트에서 돌아가고 있음을 나타낸다.
}

upstream backend{
    server backend:5000;
}

server {
    listen 80;

    location / {
        proxy_pass http://frontend;
    }

    location /oauth2/ {
        proxy_pass http://backend;

        # 추가 설정 (Forwarded Headers)
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host  $http_host;
        proxy_set_header X-Forwarded-Port  3000;

        #CORS 헤더 추가
        add_header 'Access-Control-Allow-Origin' 'http://localhost:3000'; #프론트에서 오는 오청을 허용 #원래:5173없었다.
        add_header 'Access-Control-Allow-Credentials' 'true'; #쿠키, jwt등 인증 관련 요청 허용
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT'; #허용할 http메소드 지정
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With'; #요청에서 사용할 수 있는 헤더 지정

        #CORS 요청 전에 OPTIONS 요청을 보내기 때문에 이를 정상적으로 응답하도록 설정
        if ($request_method = OPTIONS) {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Length' 0;
            add_header 'Content-Type' text/plain;
            return 204;
        }
    }

    location /api/ {
        proxy_pass http://backend;

        # Forward 헤더 추가
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host  $http_host;
        proxy_set_header X-Forwarded-Port  3000;

        #CORS 헤더 추가
        add_header 'Access-Control-Allow-Origin' 'http://localhost:3000'; #프론트에서 오는 오청을 허용 #원래:5173없었다.
        add_header 'Access-Control-Allow-Credentials' 'true'; #쿠키, jwt등 인증 관련 요청 허용
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT'; #허용할 http메소드 지정
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With'; #요청에서 사용할 수 있는 헤더 지정

        #CORS 요청 전에 OPTIONS 요청을 보내기 때문에 이를 정상적으로 응답하도록 설정
        if ($request_method = OPTIONS) {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Length' 0;
            add_header 'Content-Type' text/plain;
            return 204;
        }
    }

# 일단 제거
    # location ~ ^/ide-.* {
    #     proxy_pass http://localhost; # 백엔드에서 동적으로 업데이트
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    # }

    #WebSocket 연결 지원
    location /sockjs-node {
        proxy_pass http://frontend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        #cors 옵션 추가
        proxy_set_header Host $host; #Nginx가 자체적으로 Host 값을 변경하는 걸 변경
        proxy_set_header Origin $http_origin; #원래 요청의 Origin 값을 백엔드로 전달하도록 설정.
        proxy_set_header Access-Control-Allow-Origin "*"; #모든 도메인에서 WebSocket 요청을 허용

    } # 개발환경에서 발생하는 오류를 제거해주기 위한 부분
}location /ide-1 {
    proxy_pass http://localhost:42175;
    proxy_set_header Host ;
    proxy_set_header X-Real-IP ;
    proxy_set_header X-Forwarded-For ;
}
location /ide-1 {
    proxy_pass http://localhost:44957;
    proxy_set_header Host ;
    proxy_set_header X-Real-IP ;
    proxy_set_header X-Forwarded-For ;
}
